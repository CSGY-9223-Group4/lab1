name: Docker Security Checks

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      # Rule #0: Keep Host and Docker Up to Date
      - name: Check Docker Version
        run: |
          # Check current Docker version
          CURRENT_DOCKER_VERSION=$(docker --version | awk '{print $3}' | sed 's/,//')
          echo "Current Docker version: $CURRENT_DOCKER_VERSION"
          
          # Define allowed Docker version (replace with the latest stable version)
          ALLOWED_DOCKER_VERSION="20.10.7"
      
          # Compare versions
          if [ "$CURRENT_DOCKER_VERSION" != "$ALLOWED_DOCKER_VERSION" ]; then
            echo "Warning: Docker version $CURRENT_DOCKER_VERSION is not the allowed version ($ALLOWED_DOCKER_VERSION)."
            exit 1
          else
            echo "Docker version is up to date."
          fi
      
          # Check for the latest Docker images and their tags
          echo "Checking Docker images and their tags..."
          docker images --format "{{.Repository}}:{{.Tag}}" | while read -r image; do
            IMAGE_TAG=${image##*:}
            echo "Current image version: $image"
            
            # Define allowed image versions (modify as necessary)
            ALLOWED_IMAGE_VERSIONS=("latest" "1.0" "2.0") # Example allowed versions
      
            if [[ ! " ${ALLOWED_IMAGE_VERSIONS[@]} " =~ " ${IMAGE_TAG} " ]]; then
              echo "Warning: Docker image $image is using an older or unauthorized version."
              exit 1
            else
              echo "Image $image is using an allowed version."
            fi
          done


      # Rule #1: Do Not Expose the Docker Daemon Socket
      - name: Check for Docker Socket Exposure
        run: |
          if grep -q "/var/run/docker.sock" **/*.yml; then
            echo "Error: Docker socket is exposed."
            exit 1
          fi

      # Rule #2: Set a User
      - name: Run Hadolint for Dockerfile User Check
        uses: hadolint/hadolint-action@v3.1.0
        with:
          args: '--ignore DL3006' # Ignore user directive warning

      # Rule #3: Limit Capabilities
      - name: Check for Privileged Flags
        run: |
          if grep -q '--privileged' **/*.yml; then
            echo "Error: Privileged flag is used."
            exit 1
          fi

      # Rule #4: Prevent In-Container Privilege Escalation
      - name: Check for Privilege Escalation Prevention
        run: |
          if grep -q "allowPrivilegeEscalation: true" **/*.yml; then
            echo "Error: Privilege escalation is allowed."
            exit 1
          fi

      # Rule #5: Be Mindful of Inter-Container Connectivity
      - name: Check for Custom Network Usage
        run: |
          if ls **/*.yml 1> /dev/null 2>&1; then
            # Check for custom networks
            if ! grep -q 'networks:' **/*.yml; then
              echo "Warning: Custom Docker networks are not used. Consider defining networks to isolate containers."
            else
              echo "Custom Docker networks are defined."
            fi
      
            # Check for the use of bridge network
            if grep -q 'network_mode: bridge' **/*.yml; then
              echo "Bridge network is being used. Ensure it is appropriate for your use case."
            else
              echo "Warning: Bridge network is not explicitly defined. Consider defining a custom network."
            fi
      
            # Check for exposed ports
            if grep -q 'ports:' **/*.yml; then
              echo "Ports are exposed. Ensure that only necessary ports are exposed."
            else
              echo "Warning: No ports are exposed. Review to ensure required communication is allowed."
            fi
          else
            echo "Warning: No YAML files found to check for network configurations."
          fi


      # Rule #6: Use Linux Security Module
      - name: Check for Security Profiles
        run: |
          if ! grep -q 'securityOpt:' **/*.yml; then
            echo "Warning: No security profiles defined."
          fi

      # Rule #7: Limit Resources
      - name: Check Resource Limits
        run: |
          if ls **/*.yml 1> /dev/null 2>&1; then
            # Check for memory limits
            if ! grep -q 'mem_limit:' **/*.yml; then
              echo "Warning: No memory limits defined."
            else
              echo "Memory limits are defined."
            fi
            
            # Check for CPU limits
            if ! grep -q 'cpu_limit:' **/*.yml; then
              echo "Warning: No CPU limits defined."
            else
              echo "CPU limits are defined."
            fi
            
            # Check for other resource limits (e.g., `ulimits`)
            if ! grep -q 'ulimits:' **/*.yml; then
              echo "Warning: No ulimits defined."
            else
              echo "Ulimits are defined."
            fi
          else
            echo "Warning: No YAML files found to check for resource limits."
          fi


      # Rule #8: Set Filesystem and Volumes to Read-Only
      - name: Check for Read-Only Filesystem
        run: |
          # Check if there are any YAML files in the repository
          if ls **/*.yml 1> /dev/null 2>&1; then
            # Check for 'read_only: false' in YAML files
            if grep -q 'read_only: false' **/*.yml; then
              echo "Error: Read-only filesystem is set to false."
              echo "Recommended setting: 'read_only: true' for enhanced security."
              exit 1
            else
              echo "Read-only filesystem is correctly configured."
            fi
          else
            echo "Warning: No YAML files found to check for read-only settings."
          fi
        shell: /usr/bin/bash -e {0}



      # DISABLED - this is being handled by the trivy workflow
      # # Rule #9: Integrate Container Scanning Tools
      # - name: Run Trivy for Vulnerability Scanning
      #   run: |
      #     trivy image --exit-code 1 --severity HIGH,CRITICAL your_image:tag

      # Rule #10: Check Docker Daemon Logging Level
      - name: Check Docker Daemon Logging Level
        run: |
          if ! grep -q '"log-level": "info"' /etc/docker/daemon.json; then
            echo "Error: Docker daemon logging level is not set to info."
            echo "Recommended setting: \"log-level\": \"info\""
            exit 1
          else
            echo "Docker daemon logging level is set to info."
          fi


      # Rule #11: Run Docker in Rootless Mode
      - name: Check for Rootless Docker
        run: |
          if ! docker info | grep -q 'rootless: true'; then
            echo "Warning: Docker is not running in rootless mode."
            echo "Consider switching to rootless mode for improved security."
            exit 1
          else
            echo "Docker is running in rootless mode."
          fi

      # Rule #12: Utilize Docker Secrets
      - name: Check for Docker Secrets Usage
        run: |
          if ! grep -q 'secrets:' **/*.yml; then
            echo "Warning: Docker Secrets are not utilized."
          fi

      # Rule #13: Enhance Supply Chain Security
      - name: Check for SBOM Generation
        run: |
          if ! grep -q 'sbom:' **/*.yml; then
            echo "Warning: SBOM generation is not defined."
          fi
